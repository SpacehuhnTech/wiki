<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spacehuhn Wiki</title><link>https://spacehuhn.wiki/</link><description>Recent content on Spacehuhn Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 17:36:55 +0200</lastBuildDate><atom:link href="https://spacehuhn.wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>Content</title><link>https://spacehuhn.wiki/wifiduck/content/</link><pubDate>Sun, 07 Jun 2020 18:31:57 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/</guid><description> Disclaimer About Changes Hardware Supported Boards Connections PCB DSTIKE WiFi Duck Flash Software Preparations Flash Atmega32u4 Flash ESP8266 Unbrick Atmega32u4 Usage Ducky Script CLI Debug FAQ Development Edit Web Files Translate Keyboard Layout License Credits Suggest changes Source</description></item><item><title>Disclaimer</title><link>https://spacehuhn.wiki/wifiduck/content/disclaimer/</link><pubDate>Sun, 07 Jun 2020 18:33:41 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/disclaimer/</guid><description>This is a tool.
It&amp;rsquo;s neither good nor bad.
Use it to do good, to study, and to test.
Never use it to do harm or create damage!
The continuation of this project counts on you!
Suggest changes Source</description></item><item><title>About</title><link>https://spacehuhn.wiki/wifiduck/content/about/</link><pubDate>Sun, 07 Jun 2020 22:03:50 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/about/</guid><description>By emulating a USB keyboard, this device can be used to remote control a computer, automate tasks or execute software to gain full access. All in the matter of seconds!
This is all possible because keyboards are trusted devices, you plug it in and can start typing right away!
A human might not type very fast, but an automated device like this presses of hundreds of keys per second.
This open source project aims to provide a user-friendly tool to learn about such keystroke injection attacks.</description></item><item><title>Changes</title><link>https://spacehuhn.wiki/wifiduck/content/changes/</link><pubDate>Sun, 07 Jun 2020 22:06:33 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/changes/</guid><description>Changes since the WiFi Ducky predecessor:
Support for multiple keyboard layouts No size limit per script (other than the physical memory limit) No line length limit for the STRING command Faster typing speed Optional Neopixel or Dotstar LED Entirely new web interface Support for I2C to enable easier debugging and DIY builds Suggest changes Source</description></item><item><title>Hardware</title><link>https://spacehuhn.wiki/wifiduck/content/hardware/</link><pubDate>Sun, 07 Jun 2020 22:08:03 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/hardware/</guid><description>Video Tutorial
This tool requires following hardware:
An Atmega32u4 based board (for example: Arduino Leonardo or Pro Micro) An ESP8266 or ESP8285 (for example NodeMCU or Wemos d1 mini) [Optional] A single Neopixel (WS2812b) or Dotstar (APA102) LED You will also need a computer and USB data cable to flash the microcontrollers.
If you&amp;rsquo;re a beginner, it&amp;rsquo;s recommended you wire everything together on a breadboard first!
So get a breadboard with a couple of jumper wires.</description></item><item><title>Supported Boards</title><link>https://spacehuhn.wiki/wifiduck/content/hardware/supportedboards/</link><pubDate>Sun, 07 Jun 2020 22:12:18 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/hardware/supportedboards/</guid><description>Preflashed All-In-One Boards DSTIKE WiFi Duck You can use any Atmega32u4 or ESP8266 based development board, but if you have no idea where to start, here&amp;rsquo;s a list.
Just remember, you will need both microcontrollers!
The Atmega32u4 is the USB keyboard, the ESP8266 is the WiFi access point.
Atmega32u4 Development Boards Arduino Leonardo Arduino Micro Sparkfun Pro Micro CJMCU Beetle SS Micro DIGISPARK or other ATTINY85 based development boards, are NOT supported!</description></item><item><title>Connections</title><link>https://spacehuhn.wiki/wifiduck/content/hardware/connections/</link><pubDate>Sun, 07 Jun 2020 22:23:57 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/hardware/connections/</guid><description>Here&amp;rsquo;s a map of the pins that need to be connected.
ESP8266 Atmega32u4 D1 alias GPIO 5 3 alias SCL D2 alias GPIO 4 2 alias SDA GND GND Both chips have to be powered in order to work.
To share power between both, you need a voltage regulator that takes 5V and turns it into 3.</description></item><item><title>Pcb</title><link>https://spacehuhn.wiki/wifiduck/content/hardware/pcb/</link><pubDate>Sun, 07 Jun 2020 22:24:53 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/hardware/pcb/</guid><description>To make the DIY process easier, I designed a small PCB.
Design Files:
Pro Micro + Wemos d1 mini: https://easyeda.com/Spacehuhn/wifi-duck Pro Micro + NodeMCU: https://easyeda.com/Spacehuhn/diy-wifi-duck-pro-micro-nodemcu You can also order them on OSHPark:
Pro Micro + Wemos d1 mini: https://oshpark.com/shared_projects/ARCED9je Pro Micro + NodeMCU: https://oshpark.com/shared_projects/XUuUH1HB You&amp;rsquo;ll have to solder a Pro Micro board on one side and a Wemos d1 mini or NodeMCU board (depending on the PCB) on the other side.</description></item><item><title>Dstike Wifi Duck</title><link>https://spacehuhn.wiki/wifiduck/content/hardware/dstike/</link><pubDate>Sun, 07 Jun 2020 22:26:16 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/hardware/dstike/</guid><description>If you like to support this project, Travis Lin sells a custom designed development board which comes preflashed with this software!
You can purchase one here:
tindie DSTIKE AliExpress You can update the ESP8266 over the air and flash the Atmega32u4 via Arduino, all while enclosed in its neat little case.
Update Tutorial Video
If you wish to develop your own software or help improve this one, the 8-bit DIP-switch makes it easy for you to access the Atmega32u4 or ESP8266 independently.</description></item><item><title>Flash Software</title><link>https://spacehuhn.wiki/wifiduck/content/flashsoftware/</link><pubDate>Sun, 07 Jun 2020 22:27:27 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/flashsoftware/</guid><description>Video Tutorial
Preparations Download and install the Arduino IDE. Start the Arduino IDE, go to File &amp;gt; Preferences. At Additional Board Manager ULRs enter https://raw.githubusercontent.com/spacehuhn/hardware/master/wifiduck/package_wifiduck_index.json. You can add multiple URLs, separating them with commas. Go to Tools &amp;gt; Board &amp;gt; Board Manager, search for wifi duck and install WiFi Duck AVR Boards and WiFi Duck ESP8266 Boards. Download and extract this repository or git clone it. If you can&amp;rsquo;t find the COM port of ESP8266 board, then you&amp;rsquo;re probably missing the right drivers.</description></item><item><title>Usage</title><link>https://spacehuhn.wiki/wifiduck/content/usage/</link><pubDate>Sun, 07 Jun 2020 22:31:43 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/usage/</guid><description> Plug it in. Connect to the WiFi network wifiduck with the password wifiduck. Open a browser and visit 192.168.4.1. Click on Settings in the top right corner. Change the SSID and password. Go back to write, save and run your first Ducky Script! Suggest changes Source</description></item><item><title>Ducky Script</title><link>https://spacehuhn.wiki/wifiduck/content/usage/duckyscript/</link><pubDate>Sun, 07 Jun 2020 22:34:50 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/usage/duckyscript/</guid><description>Basics Keys are separated by a single space.
Everything written in a single line gets pressed and released at the same time. To write text, use the STRING function.
Example Explanation WINDOWS r Type the Windows key and then the r key WINDOWS r Press the Windows key and the r key simultaneously STRING WINDOWS r Write WINDOWS r Functions Command Example Description REM REM Hello World!</description></item><item><title>CLI</title><link>https://spacehuhn.wiki/wifiduck/content/usage/cli/</link><pubDate>Sun, 07 Jun 2020 22:35:52 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/usage/cli/</guid><description>The command line interface or CLI is accessible using a serial connection to the ESP8266 (115200 baud, Newline ending) or via the web interface at 192.168.4.1/terminal.html.
General Command Description Example help Returns all available commands help ram Returns available memory in bytes ram version Returns version number version settings Returns list of settings settings set -n/ame -v/alue Sets value of a specific setting set ssid &amp;quot;why fight duck&amp;quot; reset Resets all settings to their default values reset status Returns status of i2c connection with Atmega32u4 status run &amp;lt;&amp;hellip;&amp;gt; Starts executing a Ducky script run example.</description></item><item><title>Debug</title><link>https://spacehuhn.wiki/wifiduck/content/usage/debug/</link><pubDate>Sun, 07 Jun 2020 22:37:27 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/usage/debug/</guid><description>To properly debug, you need to have both the Atmega32u4 and the ESP8266 connected via USB to your computer.
That can be tricky when you only have a all in one board, so it might be useful you built one yourself. You don&amp;rsquo;t need to solder it, for example you can use an Arduino Leonardo and a NodeMCU and connect them with jumper cables.
Now open 2 instances of Arduino (so they run as separate processes!</description></item><item><title>FAQ</title><link>https://spacehuhn.wiki/wifiduck/content/usage/faq/</link><pubDate>Sun, 07 Jun 2020 22:38:02 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/usage/faq/</guid><description>If you have a question, you can check out the issue section.
Use the search function to look up similar questions, be sure to check both open and closed issues!
Also watch this video by LiveOverflow on &amp;ldquo;How (not) to ask a technical question&amp;rdquo;.
I forgot the password Flash the ESP8266 again, but make sure that you select Erase Flash: Sketch + WiFi Settings under Tools in the Arduino IDE.</description></item><item><title>Development</title><link>https://spacehuhn.wiki/wifiduck/content/development/</link><pubDate>Sun, 07 Jun 2020 22:38:56 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/development/</guid><description>Edit Web Files If you would like to modify the web interface, you can!
The web/ folder contains all .html, .css, .js files.
You can edit and test them locally as long as you&amp;rsquo;re connected to the WiFi Duck network thanks to the websocket connection handled by JavaScript in the background.
To get the new files onto the ESP8266, run python3 webconverter.py in the repository folder.
It gzips all files inside web/, converts them into a hex array and saves it in esp_duck/webfiles.</description></item><item><title>Translate Keyboard Layout</title><link>https://spacehuhn.wiki/wifiduck/content/development/translatekeyboardlayout/</link><pubDate>Sun, 07 Jun 2020 22:40:43 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/development/translatekeyboardlayout/</guid><description>Currently the supported keyboard layouts are:
DE GB US ES FR (ASCII only) All standard keys are defined in usb_hid_keys.h.
To translate a keyboard layout, you have to match each character on your keyboard to the one(s) of a US keyboard.
This stuff is hard to explain in writing and requires a lot of manual work and testing.
Copy one of the existing layouts files, like locale_us.h.</description></item><item><title>License</title><link>https://spacehuhn.wiki/wifiduck/content/licens/</link><pubDate>Sun, 07 Jun 2020 22:41:48 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/licens/</guid><description>This software is licensed under the MIT License. See the license file for details.
Suggest changes Source</description></item><item><title>Credits</title><link>https://spacehuhn.wiki/wifiduck/content/credits/</link><pubDate>Sun, 07 Jun 2020 22:42:30 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/content/credits/</guid><description>Other software used for this project:
Arduino Neopixel Library Dotstar Library AVR, ESP8266 &amp;amp; SAMD Arduino Core ESPAsyncTCP ESPAsyncWebServer SimpleCLI Suggest changes Source</description></item></channel></rss>