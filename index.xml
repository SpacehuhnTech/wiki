<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Spacehuhn Wiki</title><link>https://spacehuhn.wiki/</link><description>Recent content on Spacehuhn Wiki</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 01 Jun 2020 17:36:55 +0200</lastBuildDate><atom:link href="https://spacehuhn.wiki/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorial</title><link>https://spacehuhn.wiki/deauther/installation/tutorial/</link><pubDate>Thu, 18 Jun 2020 14:12:16 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/tutorial/</guid><description>&amp;lt;## Tutorials
Online interactive step by step tutorial by @jLynx:
🎓 http://deauth.me
$3 WiFi Jammer/Deauther using ESP8266 | Deauther 2.0 Flashing/Installation by @PwnKitteh:
🎬 /]
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>Web</title><link>https://spacehuhn.wiki/deauther/usage/web/</link><pubDate>Thu, 18 Jun 2020 14:02:46 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/usage/web/</guid><description>Getting Started Scan for WiFi networks. Connect to pwned with the password deauther. Open 192.168.4.1 (or deauth.me) If you don&amp;rsquo;t see a pwned network, flash the ESP8266 again. See installation for more.
You can also look at the Serial monitor for further debugging.
A Few Notes Ok so a few things people like to complain about that are perfectly normal.
1. The web interface is unstable and gives errors.</description></item><item><title>Edit Web Files</title><link>https://spacehuhn.wiki/wifiduck/development/webfiles/</link><pubDate>Wed, 17 Jun 2020 21:54:52 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/development/webfiles/</guid><description>If you would like to modify the web interface, you can!
The web/ folder contains all .html, .css, .js files.
You can edit and test them locally as long as you&amp;rsquo;re connected to the WiFi Duck network thanks to the websocket connection handled by JavaScript in the background.
To get the new files onto the ESP8266, run python3 webconverter.py in the repository folder.
It gzips all files inside web/, converts them into a hex array and saves it in esp_duck/webfiles.</description></item><item><title>Preparations</title><link>https://spacehuhn.wiki/wifiduck/software/preparations/</link><pubDate>Wed, 17 Jun 2020 21:05:53 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/software/preparations/</guid><description>Download and install the Arduino IDE. Start the Arduino IDE, go to File &amp;gt; Preferences. At Additional Board Manager ULRs enter https://raw.githubusercontent.com/spacehuhn/hardware/master/wifiduck/package_wifiduck_index.json. You can add multiple URLs, separating them with commas. Go to Tools &amp;gt; Board &amp;gt; Board Manager, search for wifi duck and install WiFi Duck AVR Boards and WiFi Duck ESP8266 Boards. Download and extract this repository or git clone it. If you can&amp;rsquo;t find the COM port of ESP8266 board, then you&amp;rsquo;re probably missing the right drivers.</description></item><item><title>Display, Buttons &amp; LED</title><link>https://spacehuhn.wiki/deauther/setup/wire/display_button/</link><pubDate>Wed, 10 Jun 2020 17:14:05 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/setup/wire/display_button/</guid><description>Display There are 2 types of OLED displays that can be used for this project, the SSD1306 and the SH1106:
And they sometimes come with either I2C or SPI:
Now for the display it is very important that you know which connection it is using.
I2C can be connected to any GPIO pin (except 16).
The SPI however requires following connections:
Display GPIO SCL/CLK/SCK GPIO 14 (D5) SDA/MOSI GPIO 13 (D7) RST, DC and CS pins can connected to any pin.</description></item><item><title>Tools</title><link>https://spacehuhn.wiki/deauther/setup/need/</link><pubDate>Wed, 10 Jun 2020 16:59:36 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/setup/need/</guid><description>Before you continue Using the display interface is completely optional.
The ESP8266 Deauther can also just be used over serial or the web interface.
You should know some basics of how to use, code and create stuff with Arduino.
If you don&amp;rsquo;t, then we highly recommend you to get some sort of Arduino starter kit and start learning. The steps of this tutorial are very simple, but if you have never done something like this, it&amp;rsquo;s very important to get a basic knowledge about the topic first!</description></item><item><title>Requirements</title><link>https://spacehuhn.wiki/wifiduck/hardware/requirements/</link><pubDate>Mon, 08 Jun 2020 17:01:12 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/hardware/requirements/</guid><description>This tool requires following hardware:
An Atmega32u4 based board (for example: Arduino Leonardo or Pro Micro) An ESP8266 or ESP8285 (for example NodeMCU or Wemos d1 mini) [Optional] A single Neopixel (WS2812b) or Dotstar (APA102) LED You will also need a computer and USB data cable to flash the microcontrollers.
If you&amp;rsquo;re a beginner, it&amp;rsquo;s recommended you wire everything together on a breadboard first!
So get a breadboard with a couple of jumper wires.</description></item><item><title>About</title><link>https://spacehuhn.wiki/wifiduck/about/</link><pubDate>Sun, 07 Jun 2020 22:03:50 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/about/</guid><description>By emulating a USB keyboard, this device can be used to remote control a computer, automate tasks or execute software to gain full access. All in the matter of seconds!
This is all possible because keyboards are trusted devices, you plug it in and can start typing right away!
A human might not type very fast, but an automated device like this presses of hundreds of keys per second.
This open source project aims to provide a user-friendly tool to learn about such keystroke injection attacks.</description></item><item><title>Esptool</title><link>https://spacehuhn.wiki/deauther/installation/flashing/esptool/</link><pubDate>Thu, 18 Jun 2020 14:11:24 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/flashing/esptool/</guid><description>Esptool Using the NodeMCU (or any similar development board), the flash location is 0x0000 and the mode is dout.
esptool.py -p /dev/ttyUSB0 write_flash -fm dout 0x0000 esp8266_deauther.ino.nodemcu.bin
Where /dev/ttyUSB0 is the COM port of your device, write_flash is telling the program to write to flash memory, -fm dout is the flash mode and esp8266_deather.ino.nodemcu.bin is the name of your .bin file.
Esptool-gui An easy to use GUI flasher for Windows and Mac: esptool-gui.</description></item><item><title>Oled Display</title><link>https://spacehuhn.wiki/deauther/usage/oled/</link><pubDate>Thu, 18 Jun 2020 14:03:21 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/usage/oled/</guid><description>Coming soon &amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>Flash Atmega32u4</title><link>https://spacehuhn.wiki/wifiduck/software/atmega/</link><pubDate>Wed, 17 Jun 2020 21:06:41 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/software/atmega/</guid><description>Open atmegaduck/atmega_duck.ino with the Arduino IDE. Under Tools &amp;gt; Board in the WiFi Duck AVR section, select your board; for example, Sparkfun Pro Micro. Connect the Atmega32u4 board via USB and select its port under Tools &amp;gt; Port. [Optional] Under Tools you can enable the LED and set its pin. You can also change the USB ID to make it appear as a certain type of keyboard. Press Upload. Unbrick Atmega32u4</description></item><item><title>Examples</title><link>https://spacehuhn.wiki/deauther/setup/wire/example/</link><pubDate>Wed, 10 Jun 2020 17:17:28 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/setup/wire/example/</guid><description>Example setup with I2C OLED Display GPIO GND GND VCC/VDD VCC / 3.3V SCL/CLK/SCK GPIO 4 (D2) SDA GPIO 5 (D1) Button GPIO UP GPIO 14 (D5) Down GPIO 12 (D6) A GPIO 13 (D7) NEOPIXEL LED GPIO GND GND VCC VCC/3.</description></item><item><title>Compiling using Arduino IDE</title><link>https://spacehuhn.wiki/deauther/installation/compiling/</link><pubDate>Wed, 10 Jun 2020 16:41:17 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/compiling/</guid><description>First you have to install and open the Arduino IDE.
In Arduino go to File -&amp;gt; Preferences add both URLs in Additional Boards Manager URLs
http://arduino.esp8266.com/stable/package_esp8266com_index.json https://raw.githubusercontent.com/wiki/tobozo/Arduino/package_deauther_index.json (ARM specific package : https://phpsecu.re/esp8266/arm/package_deauther_index.json)
Go to Tools -&amp;gt; Board -&amp;gt; Boards Manager, search &amp;ldquo;esp8266&amp;rdquo; and install esp8266 first, then arduino-esp8266-deauther
Select your board at Tools -&amp;gt; Board and be sure it is at ESP8266 Deauther Modules (and not at ESP8266 Modules)!</description></item><item><title>Dstike Boards</title><link>https://spacehuhn.wiki/deauther/supporteddevices/dstikeboards/</link><pubDate>Mon, 08 Jun 2020 22:44:13 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/supporteddevices/dstikeboards/</guid><description>If you want to support the development of this project, you can buy one of the offical boards by DSTIKE (Travis Lin) on following sites:
DSTIKE.com 🇨🇳 Tindie 🇨🇳 AliExpress 🇨🇳 Taobao 🇨🇳 Maltronics 🇬🇧 The Deauther boards come preflashed with the Deauther software and don&amp;rsquo;t require the installation process.
They are made especially for this project and come with a sharp 1.3 inch OLED screen, external antenna and 18650 battery connector.</description></item><item><title>Translate Keyboard Layout</title><link>https://spacehuhn.wiki/wifiduck/development/translatekeyboardlayout/</link><pubDate>Sun, 07 Jun 2020 22:40:43 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/development/translatekeyboardlayout/</guid><description>Currently the supported keyboard layouts are:
DE GB US ES RU (WIP) FR (ASCII only) All standard keys are defined in usb_hid_keys.h.
To translate a keyboard layout, you have to match each character on your keyboard to the one(s) of a US keyboard.
This stuff is hard to explain in writing and requires a lot of manual work and testing.
Copy one of the existing layouts files, like locale_us.</description></item><item><title>Supported Boards</title><link>https://spacehuhn.wiki/wifiduck/hardware/supportedboards/</link><pubDate>Sun, 07 Jun 2020 22:12:18 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/hardware/supportedboards/</guid><description>You can use any Atmega32u4 or ESP8266 based development board, but if you have no idea where to start, here&amp;rsquo;s a list.
Just remember, you will need both microcontrollers!
The Atmega32u4 is the USB keyboard, the ESP8266 is the WiFi access point.
Atmega32u4 Development Boards Arduino Leonardo Arduino Micro Sparkfun Pro Micro CJMCU Beetle SS Micro DIGISPARK or other ATTINY85 based development boards, are NOT supported!
ESP8266 Development Boards NodeMCU 1.</description></item><item><title>Disclaimer</title><link>https://spacehuhn.wiki/wifiduck/disclaimer/</link><pubDate>Sun, 07 Jun 2020 18:33:41 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/disclaimer/</guid><description>This is a tool.
It&amp;rsquo;s neither good nor bad.
Use it to do good, to study, and to test.
Never use it to do harm or create damage!
The continuation of this project counts on you!
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>NodeMCU</title><link>https://spacehuhn.wiki/deauther/installation/flashing/nodemcu/</link><pubDate>Thu, 18 Jun 2020 14:19:53 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/flashing/nodemcu/</guid><description>Node2Deauther mrvodka007 created this user friendly all-in-one flasher tool.
It helps you go through the process step by step and also provides the drivers you&amp;rsquo;ll need.
https://github.com/mrvodka007/n2d
NodeMCU-flasher Another easy to use GUI flasher, but this time only for Windows: nodemcu-flasher.
Select the COM port, go to config and select your .bin file at 0x000000.
Go back to Operation and click Flash.
⚠️ The NodeMCU Flasher is outdated and can be buggy.</description></item><item><title>Serial Usage</title><link>https://spacehuhn.wiki/deauther/usage/serial/</link><pubDate>Thu, 18 Jun 2020 14:03:03 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/usage/serial/</guid><description>Connect the ESP8266 board to your computer.
Open Arduino, go to Tools -&amp;gt; Port and select the correct serial port.
Go to Tools and click on Serial Monitor Select Newline and 115200 as baudrate &amp;hellip; Profit! You can find a list with all serial commands here.
Here is collection of small descriptions, tips and tutorials on how to use the serial command line interface.</description></item><item><title>Flash ESP8266</title><link>https://spacehuhn.wiki/wifiduck/software/esp8266/</link><pubDate>Wed, 17 Jun 2020 21:07:15 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/software/esp8266/</guid><description>Open esp_duck/esp_duck.ino with the Arduino IDE. Under Tools &amp;gt; Board in the WiFi Duck ESP8266 section, select your board. For example NodeMCU 1.0 (ESP-12E Module). Connect the ESP8266 board via USB and select its port under Tools &amp;gt; Port. Press Upload. Pro Tip: If the ESP8266 is already running this software and you just want to update it, you don&amp;rsquo;t have to connect it via USB. You can update it over the air!</description></item><item><title>Adjust code</title><link>https://spacehuhn.wiki/deauther/setup/adjust/</link><pubDate>Wed, 10 Jun 2020 17:24:48 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/setup/adjust/</guid><description>Now that your setup is done, you have to make some changes to the code.
See Installation on how to compile and upload code using Arduino.
Open Arduino and go to A_config.h (second tab)
Change all the #define settings according to your setup. The default settings are for the I2C example setup, just without the Neopixel LED. Be sure not to confuse the GPIO pins with the NodeMCU pins (D0,D1&amp;hellip;)!</description></item><item><title>Upload settings</title><link>https://spacehuhn.wiki/deauther/installation/upload/</link><pubDate>Wed, 10 Jun 2020 16:47:28 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/upload/</guid><description>Those are the recommended upload/compile settings for Arduino:
Board: Generic ESP8266 Module Flash Mode: DOUT Flash Frequency: 80 MHZ CPU Frequency: 160 MHz Flash Size: 1M (256K SPIFFS) Reset Method: nodemcu Upload Speed: 115200 Port: &amp;lt;com port of your device&amp;gt; Most NodeMCUs and other development boards have 4MB Flash so you can set the Flash Size to 4M (3M SPIFFS) or select NodeMCU 1.0 as the board.
A bigger Flash size can give you more memory in the SPIFFS for saving data, scripts or other files.</description></item><item><title>Node MCU</title><link>https://spacehuhn.wiki/deauther/supporteddevices/nodemcu/</link><pubDate>Mon, 08 Jun 2020 22:55:19 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/supporteddevices/nodemcu/</guid><description>This is the recommended board for beginners that want to learn more about electronics and programming!
The NodeMCU is an open source project and there are many companies producing it. The most known one is Amica. There is also a Lolin NodeMCU v3 but don&amp;rsquo;t get confused by any version number:
I always recommend the v1.0 (might be sold under a different version number). It&amp;rsquo;s the board from Amica. It is cheap, breadboard friendly and uses the cp2102, a better alternative to the old CH340 USB to serial chip.</description></item><item><title>Connections</title><link>https://spacehuhn.wiki/wifiduck/hardware/connections/</link><pubDate>Sun, 07 Jun 2020 22:23:57 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/hardware/connections/</guid><description>Here&amp;rsquo;s a map of the pins that need to be connected.
ESP8266 Atmega32u4 D1 alias GPIO 5 D3 alias SCL D2 alias GPIO 4 D2 alias SDA GND GND Both chips have to be powered in order to work.
To share power between both, you need a voltage regulator that takes 5V and turns it into 3.</description></item><item><title>Testing</title><link>https://spacehuhn.wiki/deauther/setup/testing/</link><pubDate>Wed, 10 Jun 2020 17:26:07 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/setup/testing/</guid><description>Now when everything is correctly setup and uploaded, you have to open the serial monitor with arduino.
Make sure to set the baud rate to 115200 and select Newline.
If you see that the device is resetting every few seconds, check the code! Most of the time it&amp;rsquo;s that you used one pin for both the display, button or LED.
Be sure not to have used the same pin for multiple things, not on the breadboard and not in the code!</description></item><item><title>Installation tips and tricks</title><link>https://spacehuhn.wiki/deauther/installation/tips/</link><pubDate>Wed, 10 Jun 2020 16:44:08 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/installation/tips/</guid><description>These are some small tips that are beneficial for first time users of this software, and hopefully will make it more accessible and cause less headache when flashing the board.
We recommend the esptool for flashing .bin files, because it works on all platforms. You can read more about how esptool works on their github page.
For customized versions, we highly recommend using Arduino IDE and our Deauther SDK (see Compiling using Arduino IDE).</description></item><item><title>Wemos</title><link>https://spacehuhn.wiki/deauther/supporteddevices/wemos/</link><pubDate>Mon, 08 Jun 2020 23:11:11 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/supporteddevices/wemos/</guid><description>Wemos D1 mini The Wemos boards have decent quality, are cheap and very small.
They work just like a NodeMCU and you can get a variety of addon shields for them!
But you have to be careful, there are a lot copies of the Wemos products!
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>PCBs</title><link>https://spacehuhn.wiki/wifiduck/hardware/pcb/</link><pubDate>Sun, 07 Jun 2020 22:24:53 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/hardware/pcb/</guid><description>To make the DIY process easier, I designed a small PCB.
Design Files:
Pro Micro + Wemos d1 mini: https://easyeda.com/Spacehuhn/wifi-duck Pro Micro + NodeMCU: https://easyeda.com/Spacehuhn/diy-wifi-duck-pro-micro-nodemcu You can also order them on OSHPark:
Pro Micro + Wemos d1 mini: https://oshpark.com/shared_projects/ARCED9je Pro Micro + NodeMCU: https://oshpark.com/shared_projects/XUuUH1HB You&amp;rsquo;ll have to solder a Pro Micro board on one side and a Wemos d1 mini or NodeMCU board (depending on the PCB) on the other side.</description></item><item><title>Adafruit</title><link>https://spacehuhn.wiki/deauther/supporteddevices/adafruit/</link><pubDate>Thu, 18 Jun 2020 14:06:33 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/supporteddevices/adafruit/</guid><description>Adafruit HUZZAH ESP8266 Adafruit has a Feather board with the ESP8266 in their sore. Those are a bit more pricy than the chinese NodeMCUs but you get a very quailty board in return, good online documentation and a friendly community around it.
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>FAQ</title><link>https://spacehuhn.wiki/deauther/faq/</link><pubDate>Wed, 10 Jun 2020 17:28:55 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/faq/</guid><description>How to ask a question I recommend you watch THIS video before you post a new issue to ask something.
Timeout error A typical message you get in the web interface is the red ERROR timeout loading file ... message.
Don&amp;rsquo;t worry!
It tells you that a transmission in the background failed.
This can happen because:
The ESP8266 web server is just randomly unreliable (nothing you can do here, just try again or use the OLED and buttons) The WiFi around is very crowded and transmissions are not reliable because of the high traffic (try changing the channel in the settings and restart, or use it in a less crowded area) You started an attack and the ESP8266 had to change the channel (you might have to reconnect manually) You&amp;rsquo;re scanning for stations (you can reconnect once the scan is finished) You&amp;rsquo;re attacking multiple targets and the ESP8266 has to change the WiFi channel constantly (you will have to restart to reconnect) The ESP8266 crashed - in this case, please look at Serial usage for further debugging.</description></item><item><title>Fake Boards</title><link>https://spacehuhn.wiki/deauther/supporteddevices/fakeboards/</link><pubDate>Mon, 08 Jun 2020 23:08:17 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/supporteddevices/fakeboards/</guid><description>You will find some cheaper boards that look like the official deauther boards but for lower prices. I highly recommend to stay away from them!
These companies like to copy Travis Lin&amp;rsquo;s (DSTIKE) designs, use my software and sell it as seemingly official Wemos boards!
Recently they started to label their boards as &amp;ldquo;TTGO&amp;rdquo;. They don&amp;rsquo;t put much effort into it, so the quality is often horrible and the PCB design very poor.</description></item><item><title>DSTIKE WiFi Duck</title><link>https://spacehuhn.wiki/wifiduck/hardware/dstike/</link><pubDate>Sun, 07 Jun 2020 22:26:16 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/hardware/dstike/</guid><description>If you like to support this project, Travis Lin sells a custom designed development board which comes preflashed with this software!
You can purchase it here:
tindie DSTIKE AliExpress You can update the ESP8266 over the air and flash the Atmega32u4 via Arduino, all while enclosed in its neat little case.
If you wish to develop your own software or help improve this one, the 8-bit DIP-switch makes it easy for you to access the Atmega32u4 or ESP8266 independently.</description></item><item><title>Projects</title><link>https://spacehuhn.wiki/deauther/projects/</link><pubDate>Thu, 11 Jun 2020 17:00:17 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/projects/</guid><description>A collection of cool projects people made with the ESP8266 Deauther.
I hope this gives some inspiration and motivation to make/hack something together yourself :)
If you have a cool project that isn&amp;rsquo;t listed here, let me know to add it by tweeting me @spacehuhn!
Deauthing Sandals Drone Hacking a FAKE Makerspace Deauther Magnet Box for Fridge Deauth Detector with 10W RGB Pwned the pwner Deauthing Sandals Becky Button @einsteinunicorn in collaboration with Naomi Wu @RealSexyCyborg designed and 3D printed a sandal.</description></item><item><title>Serial Commands</title><link>https://spacehuhn.wiki/deauther/commands/</link><pubDate>Thu, 11 Jun 2020 17:30:11 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/commands/</guid><description>Overview:
help scan [&amp;lt;all/aps/stations&amp;gt;] [-t &amp;lt;time&amp;gt;] [-c &amp;lt;continue-time&amp;gt;] [-ch &amp;lt;channel&amp;gt;] show [selected] [&amp;lt;all/aps/stations/names/ssids&amp;gt;] select [&amp;lt;all/aps/stations/names&amp;gt;] [&amp;lt;id&amp;gt;] deselect [&amp;lt;all/aps/stations/names&amp;gt;] [&amp;lt;id&amp;gt;] add ssid &amp;lt;ssid&amp;gt; [-wpa2] [-cl &amp;lt;clones&amp;gt;] [-f] add ssid -ap &amp;lt;id&amp;gt; [-cl &amp;lt;clones&amp;gt;] [-f] add name &amp;lt;name&amp;gt; [-ap &amp;lt;id&amp;gt;] [-s] [-f] add name &amp;lt;name&amp;gt; [-st &amp;lt;id&amp;gt;] [-s] [-f] add name &amp;lt;name&amp;gt; [-m &amp;lt;mac&amp;gt;] [-ch &amp;lt;channel&amp;gt;] [-b &amp;lt;bssid&amp;gt;] [-s] [-f] replace name &amp;lt;id&amp;gt; [-n &amp;lt;name&amp;gt;] [-m &amp;lt;mac&amp;gt;] [-ch &amp;lt;channel&amp;gt;] [-b &amp;lt;bssid&amp;gt;] [-s] set name &amp;lt;id&amp;gt; &amp;lt;newname&amp;gt; enable random &amp;lt;interval&amp;gt; disable random load [&amp;lt;all/ssids/names/settings&amp;gt;] [&amp;lt;file&amp;gt;] save [&amp;lt;all/ssids/names/settings&amp;gt;] [&amp;lt;file&amp;gt;] remove &amp;lt;ap/station/name/ssid&amp;gt; &amp;lt;id&amp;gt; remove &amp;lt;ap/station/names/ssids&amp;gt; [all] attack [beacon] [deauth] [deauthall] [probe] [nooutput] [-t &amp;lt;timeout&amp;gt;] attack status [&amp;lt;on/off&amp;gt;] sysinfo clear format print &amp;lt;file&amp;gt; [&amp;lt;lines&amp;gt;] delete &amp;lt;file&amp;gt; [&amp;lt;lineFrom&amp;gt;] [&amp;lt;lineTo&amp;gt;] replace &amp;lt;file&amp;gt; &amp;lt;line&amp;gt; &amp;lt;new-content&amp;gt; copy &amp;lt;file&amp;gt; &amp;lt;newfile&amp;gt; rename &amp;lt;file&amp;gt; &amp;lt;newfile&amp;gt; get &amp;lt;setting&amp;gt; set &amp;lt;setting&amp;gt; &amp;lt;value&amp;gt; reset stop &amp;lt;all/scan/attack&amp;gt; chicken reboot run &amp;lt;file&amp;gt; write &amp;lt;file&amp;gt; &amp;lt;commands&amp;gt; info // &amp;lt;comments&amp;gt; send deauth &amp;lt;apMac&amp;gt; &amp;lt;stMac&amp;gt; &amp;lt;rason&amp;gt; &amp;lt;channel&amp;gt; send beacon &amp;lt;mac&amp;gt; &amp;lt;ssid&amp;gt; &amp;lt;ch&amp;gt; [wpa2] send probe &amp;lt;mac&amp;gt; &amp;lt;ssid&amp;gt; &amp;lt;ch&amp;gt; led &amp;lt;r&amp;gt; &amp;lt;g&amp;gt; &amp;lt;b&amp;gt; [&amp;lt;brightness&amp;gt;] led &amp;lt;#rrggbb&amp;gt; [&amp;lt;brightness&amp;gt;] led &amp;lt;enable/disable&amp;gt; draw startap stopap screen mode &amp;lt;menu/packetmonitor/buttontest/loading&amp;gt; Video Overview @PwnKitteh made this video about deauther 2.</description></item><item><title>Settings</title><link>https://spacehuhn.wiki/deauther/settings/</link><pubDate>Thu, 11 Jun 2020 17:28:28 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/settings/</guid><description>Overview
version ssid password channel hidden captivePortal lang autosave autosaveTime displayInterface displayTimeout serialInterface serialEcho webInterface webSpiffs ledEnabled maxCh macAP macSt chTime minDeauths attackTimeout forcePackets deauthsPerTarget deauthReason beaconChannel beaconInterval randomTx probesPerSSID VERSION String version = VERSION;
Version number, i.e. v2.0.
PLEASE NOTE that this setting can only be changed in the source code.
SSID String ssid = &amp;quot;pwned&amp;quot;;
SSID of access point used for the web interface (if enabled).</description></item><item><title>Writing Scripts</title><link>https://spacehuhn.wiki/deauther/scripts/</link><pubDate>Thu, 11 Jun 2020 17:01:40 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/scripts/</guid><description>Introduction One cool thing about the new deauther version is the ability to write scripts. This is meant as a small add-on, and not as a main feature. You can&amp;rsquo;t really program with it or do complicated stuff, and all you can do is save regular commands to a file. To show you this, I will demonstrate how to deauth a specific mac address using a script. The only caveat here is that you need to know the channel.</description></item><item><title>Deauth-Attack not working</title><link>https://spacehuhn.wiki/deauther/problems/attacknotworking/</link><pubDate>Fri, 25 Sep 2020 13:16:10 +0200</pubDate><guid>https://spacehuhn.wiki/deauther/problems/attacknotworking/</guid><description>One reason might be that the network you are trying to attack is safe against it.The deauther is at its core a pentesting device and as such usues an exploit in the way WiFi works wich may or may not have been fixed. Maybe try the device on a different network.
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item><item><title>Ducky Script</title><link>https://spacehuhn.wiki/wifiduck/usage/duckyscript/</link><pubDate>Sun, 07 Jun 2020 22:34:50 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/usage/duckyscript/</guid><description>Basics Keys are separated by a single space.
Everything written in a single line gets pressed and released at the same time. To write text, use the STRING function.
Example Explanation WINDOWS r Type the Windows key and then the r key WINDOWS r Press the Windows key and the r key simultaneously STRING WINDOWS r Write WINDOWS r Functions Command Example Description REM REM Hello World!</description></item><item><title>CLI</title><link>https://spacehuhn.wiki/wifiduck/usage/cli/</link><pubDate>Sun, 07 Jun 2020 22:35:52 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/usage/cli/</guid><description>The command line interface or CLI is accessible using a serial connection to the ESP8266 (115200 baud, Newline ending) or via the web interface at 192.168.4.1/terminal.html.
General Command Description Example help Returns all available commands help ram Returns available memory in bytes ram version Returns version number version settings Returns list of settings settings set -n/ame -v/alue Sets value of a specific setting set ssid &amp;quot;why fight duck&amp;quot; reset Resets all settings to their default values reset status Returns status of i2c connection with Atmega32u4 status run &amp;lt;&amp;hellip;&amp;gt; Starts executing a Ducky script run example.</description></item><item><title>Debug</title><link>https://spacehuhn.wiki/wifiduck/usage/debug/</link><pubDate>Sun, 07 Jun 2020 22:37:27 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/usage/debug/</guid><description>To properly debug, you need to have both the Atmega32u4 and the ESP8266 connected via USB to your computer.
That can be tricky when you only have a all in one board, so it might be useful you built one yourself. You don&amp;rsquo;t need to solder it, for example you can use an Arduino Leonardo and a NodeMCU and connect them with jumper cables.
Now open 2 instances of Arduino (so they run as separate processes!</description></item><item><title>FAQ</title><link>https://spacehuhn.wiki/wifiduck/faq/</link><pubDate>Sun, 07 Jun 2020 22:38:02 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/faq/</guid><description>&amp;nbsp;What&amp;#39;s new compared to the WiFi Ducky? Changes since the WiFi Ducky predecessor include:
Support for multiple keyboard layouts No size limit per script (other than the physical memory limit) No line length limit for the STRING command Faster typing speed Optional Neopixel or Dotstar LED Entirely new web interface Support for I2C to enable easier debugging and DIY builds &amp;nbsp;I forgot the password Flash the ESP8266 again, but make sure that you select Erase Flash: Sketch + WiFi Settings under Tools in the Arduino IDE.</description></item><item><title>Internal Connection Problem</title><link>https://spacehuhn.wiki/wifiduck/problems/internalconnectionproblem/</link><pubDate>Tue, 15 Sep 2020 13:37:47 +0200</pubDate><guid>https://spacehuhn.wiki/wifiduck/problems/internalconnectionproblem/</guid><description>This message appears if theres a problem in the communication between the two microcontrollers.Maybe there are cables not properly connected or you just need to restart the Duck.
&amp;nbsp;I have a question &amp;nbsp;Suggest changes &amp;nbsp;Source</description></item></channel></rss>